services:
  web-server:
    build:
      context: ./web-server
      dockerfile: Dockerfile
    container_name: web_server
    volumes:
      - ./web-server:/var/www/html
      - ./ca-certs:/etc/ssl/certs/custom
    ports:
      - "8000:8000"
    depends_on:
      - mysql
      - redis
      - kafka
    networks:
      - app-net
    command: sh -c "php artisan migrate --seed && php artisan serve --host=0.0.0.0 --port=8000"

  websocket-server:
    build:
      context: ./websocket-server
      dockerfile: Dockerfile
    container_name: websocket_server
    volumes:
      - ./websocket-server:/var/www/html
      - ./ca-certs:/etc/ssl/certs/custom
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    networks:
      - app-net

  websocket-client:
    build:
      context: ./websocket-client
      dockerfile: Dockerfile
    container_name: websocket_client
    volumes:
      - ./websocket-client:/var/www/html
      - ./ca-certs:/etc/ssl/certs/custom
    ports:
      - "8081:8081"
    depends_on:
      - websocket-server
    networks:
      - app-net

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-net

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka2
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    ports:
      - "9093:9093"
    networks:
      - app-net

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - app-net

  mysql:
    image: mysql:latest
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_DATABASE: dynamic_city
    ports:
      - "3307:3307"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-net

  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      - app-net

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8082:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
      ME_CONFIG_BASICAUTH: false
    networks:
      - app-net



networks:
  app-net:
    driver: bridge

volumes:
  mysql_data:
